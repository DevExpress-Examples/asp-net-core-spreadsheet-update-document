using DevExpress.AspNetCore.Spreadsheet;
using DevExpress.Spreadsheet;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Text.Json;
using UpdateDocumentUsingAJAX.Models;

namespace UpdateDocumentUsingAJAX.Controllers {
    public class HomeController : Controller {
        private readonly ILogger<HomeController> _logger;
        private const string Document1Base64 = "\"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\"";
        private const string DocumentId1 = "MyDocumentId1";
        public HomeController(ILogger<HomeController> logger) {
            _logger = logger;
        }

        public IActionResult Index() {
            byte[] byteArrayAccessor() => JsonSerializer.Deserialize<byte[]>(Document1Base64);
            var model = new SpreadsheetDocumentContent(DocumentId1, byteArrayAccessor);
            return View(model);
        }

        public IActionResult Privacy() {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error() {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
        [HttpPost]
        [HttpGet]
        public IActionResult DxDocRequest() {
            return SpreadsheetRequestProcessor.GetResponse(HttpContext);
        }      

        public void FillInDocument(Worksheet worksheet)
        {
            string[] Expenses = new string[8] { "Expenses", "Benefits", "Marketing events", "Office lease",
            "Security", "Training classes", "Web site hosting", "Web site updates"};            
            Row fistRow = worksheet.Rows[0];
            fistRow.ColumnWidthInCharacters = 6;
            fistRow.Alignment.Horizontal = SpreadsheetHorizontalAlignment.Center;
            fistRow.Font.Size = 12;
            fistRow.Font.FontStyle = SpreadsheetFontStyle.Bold;
            Column fistColumn = worksheet.Columns[0];
            fistColumn.ColumnWidthInCharacters = 17;
            fistColumn.Font.Size = 12;            
            CellCollection cells = worksheet.Cells;
            for(int i =0; i<12; i++) {
                cells[0,i+1].Value = DateTime.Now.AddYears(i).Year.ToString();
                cells[0, i + 1].Font.Color = Color.White;
            }
            for (int i = 0; i < 8; i++) {
                cells[i, 0].Value = Expenses[i];
            }
            CellRange range = worksheet.Range["A1:M8"];
            DevExpress.Spreadsheet.Formatting rangeFormatting = range.BeginUpdateFormatting();
            rangeFormatting.Fill.BackgroundColor = Color.DarkGray;
            rangeFormatting.Borders.InsideHorizontalBorders.LineStyle = BorderLineStyle.Thin;
            rangeFormatting.Borders.InsideHorizontalBorders.Color = Color.Gray;
            rangeFormatting.Borders.InsideVerticalBorders.LineStyle = BorderLineStyle.Thin;
            rangeFormatting.Borders.InsideVerticalBorders.Color = Color.Gray;
            rangeFormatting.Borders.SetOutsideBorders(Color.Black, BorderLineStyle.Thick);
            range.EndUpdateFormatting(rangeFormatting);
        }
        public ActionResult NewDocument(SpreadsheetClientState spreadsheetState) {
            var spreadsheet = SpreadsheetRequestProcessor.GetSpreadsheetFromState(spreadsheetState);
            spreadsheet.New();
            FillInDocument(spreadsheet.Document.Worksheets[0]);
            byte[] docBytes = spreadsheet.SaveCopy(DocumentFormat.Xlsx);
            Func<byte[]> contentAccessor = () => docBytes;
            var model = new SpreadsheetDocumentContent(Guid.NewGuid().ToString(), contentAccessor);
            return PartialView("SpreadsheetPartialView", model);
        }
    }
}
